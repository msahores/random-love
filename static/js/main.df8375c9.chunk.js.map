{"version":3,"sources":["components/QuickSlider/index.tsx","components/hooks/useGetImages.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuickSlider","slides","ticker","useRef","isPaused","sliderContainer","animate","current","length","style","backgroundImage","url","togglePause","useEffect","loop","setInterval","document","addEventListener","clearInterval","removeEventListener","className","ref","useGetImages","accessKey","useState","images","setImages","category","setCategory","api","createApi","search","getPhotos","query","orientation","page","perPage","then","result","response","results","catch","e","console","log","App","setSlides","process","REACT_APP_ACCESS_KEY","param","window","location","pathname","slice","preSlides","map","image","push","id","urls","regular","name","alt_description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uMA6CeA,EAlCgB,SAAC,GAAqB,IAAD,IAAlBC,cAAkB,MAAT,GAAS,EAE5CC,EAASC,iBAAe,GACxBC,EAAWD,kBAAgB,GAC3BE,EAAkBF,iBAAuB,MAEzCG,EAAU,WACTF,EAASG,UACRL,EAAOK,UAAYN,EAAOO,SAC5BN,EAAOK,QAAU,GAEa,OAA5BF,EAAgBE,UAClBF,EAAgBE,QAAQE,MAAMC,gBAA9B,cAAuDT,EAAOC,EAAOK,SAASI,IAA9E,MAGFT,EAAOK,YAGLK,EAAc,WAClBR,EAASG,SAAWH,EAASG,SAY/B,OATAM,qBAAU,WACR,IAAMC,EAAOC,YAAYT,EAtBV,KAwBf,OADAU,SAASC,iBAAiB,UAAWL,GAC9B,WACLM,cAAcJ,GACdE,SAASG,oBAAoB,UAAWP,MAEzC,CAACX,IAEI,qBAAKmB,UAAU,kBAAkBC,IAAKhB,K,OCWjCiB,EAzBM,SAACC,GAAqC,IAAD,EAC5BC,mBAAkB,IADU,mBACjDC,EADiD,KACzCC,EADyC,OAExBF,mBAAiB,UAFO,mBAEjDG,EAFiD,KAEvCC,EAFuC,KAGlDC,EAAM1B,iBAAO2B,YAAU,CAAEP,eAmB/B,OAjBAV,qBAAU,WACRgB,EAAItB,QAAQwB,OACTC,UAAU,CACTC,MAAON,EACPO,YAAa,YACbC,KAAM,EACNC,QAAS,KAGVC,MAAK,SAACC,GAAiB,IAAD,EACrBZ,EAAS,OAACY,QAAD,IAACA,GAAD,UAACA,EAAQC,gBAAT,aAAC,EAAkBC,YAE7BC,OAAM,SAAAC,GACLC,QAAQC,IAAI,yBAA0BF,QAEzC,CAACf,IAEG,CAACF,EAAQG,IClBHiB,EA5BC,WAAO,IAAD,EACQrB,mBAAS,IADjB,mBACbvB,EADa,KACL6C,EADK,OAEUxB,EAAayB,kJAAYC,sBAFnC,mBAEbvB,EAFa,KAELG,EAFK,KAsBpB,OAlBAf,qBAAU,WACR,IAAMoC,EAAQC,OAAOC,SAASC,SAASC,MAAM,GACzCJ,GAAOrB,EAAYqB,KACtB,IAEHpC,qBAAU,WACR,IAAMyC,EAAiB,GACvB7B,EAAO8B,KAAI,SAAAC,GAAK,OACdF,EAAUG,KAAK,CACbC,GAAIF,EAAME,GACV/C,IAAK6C,EAAMG,KAAKC,QAChBC,KAAML,EAAMM,qBAIhBhB,EAAUQ,KACT,CAAC7B,EAAQG,IAGV,qBAAKR,UAAU,MAAf,SACGnB,EAAOO,OAAS,GAAK,cAAC,EAAD,CAAaP,OAAQA,OCZlC8D,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAEnB,IADL6B,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCLdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzD,SAAS0D,eAAe,SAM1BX,M","file":"static/js/main.df8375c9.chunk.js","sourcesContent":["import React, {\n  FC, useEffect, useRef,\n} from 'react';\n\ninterface Props {\n  slides: {\n    id: string,\n    url: string,\n    name: string,\n  }[] | undefined\n}\nconst QuickSlider: FC<Props> = ({ slides = [] }) => {\n  const interval = 100;\n  const ticker = useRef<number>(0);\n  const isPaused = useRef<boolean>(false);\n  const sliderContainer = useRef<HTMLDivElement>(null);\n\n  const animate = () => {\n    if (!isPaused.current) {\n      if (ticker.current === slides.length) {\n        ticker.current = 0;\n      }\n      if (sliderContainer.current !== null) {\n        sliderContainer.current.style.backgroundImage = `url(${slides[ticker.current].url})`;\n      }\n      // eslint-disable-next-line no-plusplus\n      ticker.current++;\n    }\n  };\n  const togglePause = () => {\n    isPaused.current = !isPaused.current;\n  };\n\n  useEffect(() => {\n    const loop = setInterval(animate, interval);\n    document.addEventListener('keydown', togglePause);\n    return () => {\n      clearInterval(loop);\n      document.removeEventListener('keydown', togglePause);\n    };\n  }, [slides]);\n\n  return (<div className=\"sliderContainer\" ref={sliderContainer} />);\n};\n\nexport default QuickSlider;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState, useRef } from 'react';\nimport { createApi } from 'unsplash-js';\n\ntype UseUnsplashT = [Image[], (value: React.SetStateAction<string>) => void];\n\nexport interface Image {\n  alt_description: string,\n  blur_hash: string,\n  categories: string[],\n  color: string,\n  created_at: string,\n  current_user_collections: any[],\n  description: null | any,\n  height: number,\n  id: string,\n  liked_by_user: boolean,\n  likes: number,\n  links: any,\n  promoted_at: null | any,\n  sponsorship: null | any,\n  tags: any[],\n  updated_at: string,\n  urls: any,\n  user: any,\n  width: number,\n}\n\nconst useGetImages = (accessKey: string): UseUnsplashT => {\n  const [images, setImages] = useState<Image[]>([]);\n  const [category, setCategory] = useState<string>('random');\n  const api = useRef(createApi({ accessKey }));\n\n  useEffect(() => {\n    api.current.search\n      .getPhotos({\n        query: category,\n        orientation: 'landscape',\n        page: 1,\n        perPage: 40,\n        // color: 'yellow'\n      })\n      .then((result: any) => {\n        setImages(result?.response?.results);\n      })\n      .catch(e => {\n        console.log('something went wrong: ', e);\n      });\n  }, [category]);\n\n  return [images, setCategory];\n};\n\nexport default useGetImages;\n","import React, { FC, useEffect, useState } from 'react';\nimport QuickSlider from './components/QuickSlider';\nimport useGetImages from './components/hooks/useGetImages';\n\nconst App: FC = () => {\n  const [slides, setSlides] = useState([]);\n  const [images, setCategory] = useGetImages(process.env.REACT_APP_ACCESS_KEY as string);\n\n  useEffect(() => {\n    const param = window.location.pathname.slice(1);\n    if (param) setCategory(param);\n  }, []);\n\n  useEffect(() => {\n    const preSlides: any = [];\n    images.map(image => (\n      preSlides.push({\n        id: image.id,\n        url: image.urls.regular,\n        name: image.alt_description,\n      })\n    ));\n\n    setSlides(preSlides);\n  }, [images, setCategory]);\n\n  return (\n    <div className=\"App\">\n      {slides.length > 0 && <QuickSlider slides={slides} />}\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}